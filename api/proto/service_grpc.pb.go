// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenGeocoding_Forward_FullMethodName = "/libpostal.OpenGeocoding/Forward"
)

// OpenGeocodingClient is the client API for OpenGeocoding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenGeocodingClient interface {
	Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (*ForwardResponse, error)
}

type openGeocodingClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenGeocodingClient(cc grpc.ClientConnInterface) OpenGeocodingClient {
	return &openGeocodingClient{cc}
}

func (c *openGeocodingClient) Forward(ctx context.Context, in *ForwardRequest, opts ...grpc.CallOption) (*ForwardResponse, error) {
	out := new(ForwardResponse)
	err := c.cc.Invoke(ctx, OpenGeocoding_Forward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenGeocodingServer is the server API for OpenGeocoding service.
// All implementations must embed UnimplementedOpenGeocodingServer
// for forward compatibility
type OpenGeocodingServer interface {
	Forward(context.Context, *ForwardRequest) (*ForwardResponse, error)
	mustEmbedUnimplementedOpenGeocodingServer()
}

// UnimplementedOpenGeocodingServer must be embedded to have forward compatible implementations.
type UnimplementedOpenGeocodingServer struct {
}

func (UnimplementedOpenGeocodingServer) Forward(context.Context, *ForwardRequest) (*ForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (UnimplementedOpenGeocodingServer) mustEmbedUnimplementedOpenGeocodingServer() {}

// UnsafeOpenGeocodingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenGeocodingServer will
// result in compilation errors.
type UnsafeOpenGeocodingServer interface {
	mustEmbedUnimplementedOpenGeocodingServer()
}

func RegisterOpenGeocodingServer(s grpc.ServiceRegistrar, srv OpenGeocodingServer) {
	s.RegisterService(&OpenGeocoding_ServiceDesc, srv)
}

func _OpenGeocoding_Forward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenGeocodingServer).Forward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenGeocoding_Forward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenGeocodingServer).Forward(ctx, req.(*ForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenGeocoding_ServiceDesc is the grpc.ServiceDesc for OpenGeocoding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenGeocoding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libpostal.OpenGeocoding",
	HandlerType: (*OpenGeocodingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Forward",
			Handler:    _OpenGeocoding_Forward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
